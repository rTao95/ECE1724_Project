Proposal for a Distributed File Storage System

1. Objective

The objective of this project is to develop a scalable, distributed file storage system in Rust that combines peer-to-peer networking with distributed data chunking and redundancy. This system will fill a gap in the Rust ecosystem by providing a native, fault-tolerant solution for storing and managing large files across multiple nodes with minimal central control. Using Rust’s high performance and memory safety features, the project aims to offer a robust and reliable platform suited for use cases requiring resilient, decentralized storage.

2. Key Features

2.1 Node Discovery and P2P Networking
Purpose: Enable decentralized communication between nodes for scalability and resilience.
Implementation: Using Libp2p, nodes will discover and connect with each other without relying on centralized infrastructure.
Workflow: New nodes will register with a master node initially to receive connection details of existing peers, after which they communicate directly with these peers without further involvement from the master.
2.2 File Chunking and Distribution
Purpose: Improve data transfer efficiency and allow for distributed, redundant storage across nodes.
Implementation: Files will be broken down into smaller chunks before being distributed across the network, facilitating efficient storage, retrieval, and redundancy.
Advantage: Chunking enables parallel uploads/downloads and minimizes storage strain on individual nodes, which is critical for large file storage.
2.3 Data Redundancy and Reliability
Purpose: Ensure data integrity and availability in case of node failure.
Implementation: The system will employ a data redundancy strategy, such as replication or erasure coding, where file chunks are stored redundantly across nodes. Meanwhile, a unique coding of name will be invented as guide of status of chunked files and data security.
Master Node’s Role: The master node monitors node health and redistributes data if a node becomes unavailable, maintaining reliability.
2.4 User Authentication and Access Control
Purpose: Secure the system and restrict access to authorized users.
Implementation: Basic authentication will protect file access, allowing the system to manage permissions for uploading, downloading, and managing files.
Access Control Mechanism: User permissions will govern access, with a role-based or user-specific model to prevent unauthorized access.
2.5 Master Node for Initial Coordination
Purpose: Simplify node registration and maintain network metadata without direct involvement in data transfer.
Functionality:
Node Registration: New nodes register with the master node upon joining, which provides them with the addresses of peer nodes.
Monitoring and Metadata Management: The master node maintains metadata on network structure and node status, checking for node health and coordinating recovery in case of failures.
Failover Mechanism: The master node provides alternative peer connections to nodes if their existing connections fail.
2.6 Front-End Interface (CLI)
Purpose: Offer a user-friendly interface for system interaction and administration.
Implementation: A command-line interface (CLI) will be developed, allowing users to perform operations like uploading, downloading, listing files, and monitoring node health.
Functionality: This CLI will include commands for each core feature, making it accessible even to users without a graphical interface.
